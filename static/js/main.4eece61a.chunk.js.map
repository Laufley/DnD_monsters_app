{"version":3,"sources":["dummy.jpeg","music.jpeg","ancient-wind-112528.mp3","electronic-rock-king-around-here-15045.mp3","Components/MonsterDetails.js","Components/MonsterItem.js","Components/MonstersList.js","Components/Music.js","Containers/MonstersBox.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","MonsterDetails","_ref","_ref$details","details","backupImage","concat","image","dummy","React","createElement","className","name","Fragment","type","alignment","size","strength","dexterity","constitution","intelligence","wisdom","charisma","src","height","width","MonsterItem","monster","onMonsterClicked","onClick","fetch","url","then","response","json","data","MonstersList","monsters","listOfMonsters","map","index","key","Music","musicItem","_useState","useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","song","useRef","Audio","useEffect","console","log","current","play","pause","music","MonstersBox","setMonsters","_useState3","_useState4","monsterClicked","setMonsterClicked","_useState5","_useState6","searchValue","setSearchValue","_useState7","_useState8","currentPage","setCurrentPage","postsIndex","paginatedMonsters","slice","results","musicItem1","musicItem2","onSubmit","evt","preventDefault","filteredMonsters","filter","toLowerCase","length","onChange","target","value","App","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4eece61a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dummy.e23bb253.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/music.cccf0798.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/ancient-wind-112528.bee5ae93.mp3\";","module.exports = __webpack_public_path__ + \"static/media/electronic-rock-king-around-here-15045.64daf639.mp3\";","import React from 'react'\nimport dummy from '../dummy.jpeg'\n\nconst MonsterDetails = ({details = {}}) => {  // setting it to an empty object so that the Details section renders empty\n\n    const imgLink = `https://www.dnd5eapi.co${details.image}`\n    const backupImage = dummy\n\n\n    return ( \n        <div className='monster-details'> \n            {details && details.name &&  // had to add 2 logical conditions to make the details section start off empty (because just for null and undefined wasn't enough))\n            <>\n                <div className='details'>\n                    <ul className='stats'>\n                        <li><strong>Name:</strong> {details.name} </li>\n                        <li><strong>Type: </strong>{details.type}</li>\n                        <li><strong>Alignment: </strong>{details.alignment}  </li>\n                        <li><strong>Size: </strong>{details.size} </li>\n                        <li><strong>Stats:</strong>  \n                            <ul>\n                                <li><strong>Strength:</strong> {details.strength}</li>\n                                <li><strong>Dexterity:</strong> {details.dexterity}</li>\n                                <li><strong>Constitution:</strong> {details.constitution}</li>\n                                <li><strong>Intelligence:</strong> {details.intelligence}</li>\n                                <li><strong>Wisdom: </strong> {details.wisdom}</li>\n                                <li><strong>Charisma:</strong> {details.charisma}</li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <img className='image' src={details.image ? `https://www.dnd5eapi.co${details.image}` : (backupImage)} height=\"300px\" width=\"300px\"/>\n                </div>   \n            </>\n        }\n        </div>\n        \n    )\n    \n    \n}\n\nexport default MonsterDetails\n","import React from 'react'\n\n\nconst MonsterItem = ({monster, onMonsterClicked}) => {\n\n    const handleClick = () => {\n        fetch('https://www.dnd5eapi.co' + monster.url)\n        .then(response => response.json())\n        .then(data => onMonsterClicked(data))\n    }\n    return (\n        <ul>\n            <li onClick={handleClick}>{monster.name}</li>\n        </ul>\n    )\n}\n\nexport default MonsterItem\n\n\n\n","import React from 'react'\nimport MonsterItem from './MonsterItem'\n\nconst MonstersList = ({monsters, onMonsterClicked}) => {\n\n    const listOfMonsters = monsters.map((monster, index) => {\n\n    return <MonsterItem key={index} monster={monster} onMonsterClicked={onMonsterClicked}></MonsterItem>\n\n    })\n\n    return (\n        <div className='monster-list'>\n            <ul>\n            {listOfMonsters}\n            </ul>\n        </div>\n    )\n}\n\nexport default MonstersList\n\n","import React, {useEffect, useRef, useState} from 'react'\nimport music from '../music.jpeg'\n\n\nconst Music = ({musicItem}) => {\n\n    const [isPlaying, setIsPlaying] = useState(false)\n    const song = useRef(new Audio(musicItem))\n\n    const handleMusic = () => {\n        setIsPlaying(!isPlaying)\n    }\n    \n    useEffect(() => {\n\n        if (isPlaying) {\n            console.log('it tickles!')\n            song.current.play()\n        }\n        else {\n            console.log('finneee i\\'ll stop')\n            song.current.pause()\n        }\n        \n    }, [isPlaying])\n    \n\n\n    return (\n        <div>\n            <img src={music} height='50px' width='50px' onClick={handleMusic} ></img>\n\n        </div>\n    )\n\n}\n\n\nexport default Music","import React, {useState, useEffect} from 'react'\nimport MonsterDetails from '../Components/MonsterDetails';\nimport MonstersList from '../Components/MonstersList';\nimport Music from '../Components/Music';\nimport musicItem1 from '../ancient-wind-112528.mp3'\nimport musicItem2 from '../electronic-rock-king-around-here-15045.mp3'\n\nconst MonstersBox = () => {\n\n\n    const [monsters, setMonsters] = useState([]);\n    const [monsterClicked, setMonsterClicked] = useState('')\n    const [searchValue, setSearchValue] = useState(\"\")\n\n\n    const [currentPage, setCurrentPage] = useState(1)  // for pagination\n    const monstersPerPage = 20\n\n\n\n    const postsIndex = (currentPage * monstersPerPage) - monstersPerPage // this indext will tell the next function the number posts we want to load on the next page. first time i run, this result is 0. On the second run, the pageNumber is 2 which makes the restult catch the next 20 items\n    const paginatedMonsters = monsters.slice(postsIndex, monstersPerPage + postsIndex)// this grabs the posts to show per page. It starts at the index, and then moves up to 20 posts which is the postsPerPage. Splice returns a list\n                                                                                        // had to use slice instead of splice because splice modifies the original and slice creates a copy of the original array. using splice gave 2 of errors!\n                                                                                        // 1. Return button triggered the NEXT ITEMS button instead. Reasoning: with splice, it removes the selected items. SO the items were removed from the original list and that's why the return button didnt work and only moved the list forward.\n                                                                                        // 2. Clicking on any monster triggered Onclick details AND also next page button. Reasoning: When clicked on next button which uses splice, the date in splice has been removed from the original array(it's been modified). So. when the DOM is reloaded, the content it's trying to pull doesnt exist from the original array anymore and the first items are the ones that have not been removed yet. That's why it has the same effect as the Next button click.\n    useEffect(() => {\n        fetch('https://www.dnd5eapi.co/api/monsters')\n        .then(response => response.json())\n        .then(monsters => setMonsters(monsters.results))\n    }, []);\n\n    const onMonsterClicked = (monster) => {\n        console.log(\"It tickles!\")\n        setMonsterClicked(monster)\n    }\n\n    const handleNextPage = () => {\n        setCurrentPage(currentPage + 1)\n            \n    }\n\n    const handlePreviousPage = () => {\n        if (currentPage === 1) {\n            return\n        }\n        else {\n            setCurrentPage(currentPage - 1)\n        }\n    }\n\n    const handleForm = (evt) => {\n        setSearchValue(evt.target.value)\n    }\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault()\n        const filteredMonsters = monsters.filter((monster) => searchValue.toLowerCase() == monster.name.toLowerCase())      \n        if(filteredMonsters.length > 0){\n        fetch('https://www.dnd5eapi.co' + filteredMonsters[0].url)\n        .then(response => response.json())\n        .then(data => setMonsterClicked(data))\n    }\n    }\n\n    return (\n        <>\n        <div className='header'>\n            <h1>🔥 D&D Monster archives</h1>\n            <div className='music-click'>\n                <Music musicItem={musicItem1} ></Music>\n                <Music musicItem={musicItem2}></Music>\n            </div>\n        </div>\n        \n        <div className='main-container'>\n\n            <form className='search-by-name' onSubmit={handleSubmit}>\n                <label>Search by Name </label>\n                <input className='input' type=\"text\" onChange={handleForm} value={searchValue}></input>\n                <button className='button-search' type='submit'>Search</button>\n            </form>\n\n            <MonstersList monsters={paginatedMonsters} onMonsterClicked={onMonsterClicked}/>\n            \n            <div className='.button-container '>\n            <button className='button-previous' onClick={handlePreviousPage}> « Previous page</button>\n            <button className='button-next' onClick={handleNextPage}>Next Page »</button>\n            </div>\n\n            <MonsterDetails details={monsterClicked}/>\n        </div>\n\n        <div className='footer'> project: API fetching D&D samples for REACT app</div>\n        </>\n    )    \n}\nexport default MonstersBox\n\n\n\n  //PAGINATION//\n    //need button handle previous: needs current page & condictional logic to reduce\n    //need button handle next: needs current page & conditional logic to increase\n    //determina how many posts per page\n    //determine how many posts next page will start loading from and stop loading from (splice)\n    //connect the posts to the retrieved API data (monsters)\n","import React from 'react';\nimport './App.css';\nimport MonstersBox from './Containers/MonstersBox'\n\nfunction App() {\n  return (\n    <MonstersBox/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}